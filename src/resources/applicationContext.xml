<?xml version="1.0" encoding="utf-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd        
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd        
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd"
	default-autowire="byName">

	<!-- Spring注解方式注入 -->
	<context:annotation-config />
	<!-- 扫描包类，将标注Spring注解的类自动转化Bean,同时完成Bean的注入 -->
	<context:component-scan base-package="com.extweb.*"></context:component-scan>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config.properties</value>
				<value>classpath*:mail.properties</value>
			</list>
		</property>
	</bean>


	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>

		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.extweb.model</value>
			</list>
		</property>

		<!-- 自动扫描hbm方式配置的hibernate文件和.hbm文件 -->
		<!-- <property name="mappingDirectoryLocations"> <list> <value>classpath:sy/hbm</value> </list> </property> -->
	</bean>

	<!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<bean id="ssfactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:resources/mybatis/config-mappers.xml"></property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.extweb.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="ssfactory"></property>
		<!-- 以下配置抛出java.lang.ClassNotFoundException 异常 @wzguo -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory_adssp"></property> -->
	</bean>

	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBaseViewResolver"> -->
	<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property> -->
	<!-- <property name="prefix" value="/"></property> -->
	<!-- <property name="suffix" value=.jsp "></property> -->
	<!-- </bean> -->

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" />
			<tx:method name="save*" />
			<tx:method name="update*" />
			<tx:method name="modify*" />
			<tx:method name="edit*" />
			<tx:method name="delete*" />
			<tx:method name="remove*" />
			<tx:method name="repair" />
			<tx:method name="deleteAndRepair" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.extweb..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>


	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.extweb.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>


	<!-- 项目自定义的Realm -->
	<bean id="shiroDbRealm" class="com.extweb.shiro.ShiroDBRealm" />
	<bean id="formAuthFilter" class="com.extweb.shiro.FormAuthFilter">
		<property name="development" value="false" />  <!-- 验证开发模式不验证 -->
	</bean>

	<!-- shiro缓存 -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:resources/shiro-ehcache.xml" />
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<!-- <property name="cacheManager" ref="shiroEhcacheManager" /> -->
		<!-- <property name="rememberMeManager" ref="rememberMeManager" /> -->
	</bean>
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="rememberMeParam" value="rememberMe" />
	</bean>

	<!-- <bean name="timeTask" class="com.extweb.service.impl.TimeTask" /> -->
	<!-- <bean id="methodInvokingJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> -->
	<!-- <property name="targetObject"> -->
	<!-- <ref bean="timeTask" /> -->
	<!-- </property> -->
	<!-- <property name="targetMethod"> -->
	<!-- <value>execute</value> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- @wzguo -->
	<!-- 配置触发器 -->
	<!-- <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean"> -->
	<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
	<!-- <property name="jobDetail"> -->
	<!-- <ref bean="methodInvokingJobDetail" /> -->
	<!-- </property> -->
	<!-- 每天的每隔1分钟触发 -->
	<!-- <property name="cronExpression"> -->
	<!-- <value>0 30 0-23 * * ?</value> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> -->
	<!-- 添加触发器 -->
	<!-- <property name="triggers"> -->
	<!-- <list> -->
	<!-- <ref bean="cronTrigger" /> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- Shiro权限过滤配置 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/admin/login.html" />
		<property name="successUrl" value="/admin/index.html" />
		<property name="unauthorizedUrl" value="/admin/error.html" />
		<property name="filters">
			<map>
				<entry key="captcha" value-ref="formAuthFilter" />
			</map>
			<!-- <util:map></util:map> @wzguo -->

		</property>
		<property name="filterChainDefinitions">
			<value>
				/admin/** = captcha
				/** = anon
			</value>
		</property>
	</bean>

	<!-- mail邮箱配置 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host">
			<value>${mail.smtp}</value>
		</property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
		<property name="username">
			<value>${mail.username}</value>
		</property>
		<property name="password">
			<value>${mail.password}</value>
		</property>
	</bean>
	<bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from">
			<value>${mail.from}</value>
		</property>
		<property name="subject">
			<value>${mail.subject}</value>
		</property>
	</bean>

	<bean id="sendMail" class="com.extweb.util.EmailUtil">
		<property name="mailMessage">
			<ref bean="mailMessage" />
		</property>
		<property name="mailSender">
			<ref bean="mailSender" />
		</property>
	</bean>

</beans>	